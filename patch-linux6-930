diff -ruN rcraid-download/9.3.0/driver_sdk/src/rc_config.c rcraid-9.3.0/src/rc_config.c
--- rcraid-download/9.3.0/driver_sdk/src/rc_config.c	2021-05-03 19:46:00.000000000 +1100
+++ rcraid-9.3.0/src/rc_config.c	2023-07-24 15:20:38.716964329 +1100
@@ -5,11 +5,16 @@
  *
  ****************************************************************************/
 
+#include <linux/version.h>
 
 #include <linux/module.h>
 #include <linux/fs.h>
 #include <linux/miscdevice.h>
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6,3,0)
 #include <linux/genhd.h>
+#endif
+
 #include <linux/sched.h>
 #include <linux/completion.h>
 
diff -ruN rcraid-download/9.3.0/driver_sdk/src/rc.h rcraid-9.3.0/src/rc.h
--- rcraid-download/9.3.0/driver_sdk/src/rc.h	2021-05-03 19:46:00.000000000 +1100
+++ rcraid-9.3.0/src/rc.h	2023-07-24 15:16:12.149215104 +1100
@@ -37,6 +37,9 @@
 
 #include <linux/blkdev.h>
 #include <scsi/scsi.h>
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,3,0)
+#include <scsi/sg.h>
+#endif
 #include <scsi/scsi_host.h>
 #include <scsi/scsi_device.h>
 #include <scsi/scsi_cmnd.h>
@@ -219,3 +222,13 @@
 		}							\
 	}
 #endif // _RC_OSHEADERS_H_
+
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,3,0)
+struct rcraid_cmd_priv {
+        rc_srb_t *rc_srb;
+};
+static inline struct rcraid_cmd_priv *rcraid_priv(struct scsi_cmnd *cmd)
+{
+       return scsi_cmd_priv(cmd);
+}
+#endif
diff -ruN rcraid-download/9.3.0/driver_sdk/src/rc_init.c rcraid-9.3.0/src/rc_init.c
--- rcraid-download/9.3.0/driver_sdk/src/rc_init.c	2021-05-03 19:46:00.000000000 +1100
+++ rcraid-9.3.0/src/rc_init.c	2023-07-24 15:18:23.682104492 +1100
@@ -195,8 +195,12 @@
 int         rc_bios_params(struct scsi_device *sdev, struct block_device *bdev,
 			   sector_t capacity, int geom[]);
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,3,0)
+int         rc_queue_cmd_lck(struct scsi_cmnd * scp);
+#else
 int         rc_queue_cmd_lck(struct scsi_cmnd * scp, void (*CompletionRoutine) (struct scsi_cmnd *));
-			 
+#endif
+
 #ifdef RC_AHCI_SUPPORT
 // Additions for AHCI driver
 static inline void rc_ahci_disable_irq(rc_adapter_t *adapter);
@@ -335,10 +339,15 @@
 	.module =                  THIS_MODULE,
 	.name =                    RC_DRIVER_NAME,
 	.proc_name =               RC_DRIVER_NAME,
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6,3,0)
 	.proc_dir =                NULL,
+#endif	
 	.info =                    rc_info,
 	.ioctl =                   rc_ioctl,    
 	.queuecommand =            rc_queue_cmd,
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,3,0)
+	.cmd_size	=			   sizeof(struct rcraid_cmd_priv),
+#endif
 	.bios_param =              rc_bios_params,
 	.can_queue =               1,
 	.this_id =                 -1,
@@ -606,6 +615,7 @@
 	/*
 	 * set dma_mask to 64 bit capabilities but if that fails, try 32 bit
 	 */
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6,3,0)
 	if (!pci_set_dma_mask(dev, DMA_BIT_MASK(64)) &&
 	    !pci_set_consistent_dma_mask(dev, DMA_BIT_MASK(64))) {
 		rc_printk(RC_NOTE, RC_DRIVER_NAME ": %s 64 bit DMA enabled\n",
@@ -614,6 +624,14 @@
 		   !pci_set_consistent_dma_mask(dev, DMA_BIT_MASK(32))) {
 		rc_printk(RC_NOTE, RC_DRIVER_NAME ": %s 64 bit DMA disabled\n",
 			  __FUNCTION__);
+#else
+	if (!dma_set_mask_and_coherent(&dev->dev, DMA_BIT_MASK(64))) {
+		rc_printk(RC_NOTE, RC_DRIVER_NAME ": %s 64 bit DMA enabled\n",
+			  __FUNCTION__);
+	} else if (!dma_set_mask_and_coherent(&dev->dev, DMA_BIT_MASK(32))) {
+		rc_printk(RC_NOTE, RC_DRIVER_NAME ": %s 64 bit DMA disabled\n",
+			  __FUNCTION__);
+#endif
 	} else {
 		rc_printk(RC_ERROR, RC_DRIVER_NAME ": %s failed to "
 			  "set usable DMA mask\n", __FUNCTION__);
@@ -889,9 +907,9 @@
 	host_ptr->max_cmd_len = 16;
 	host_ptr->unique_id = 0;
 	host_ptr->this_id = -1;  /* SCSI Id for the adapter itself */
-
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6,3,0)
 	driver_template.present = 1;    /* one virtual adapter */
-
+#endif
 	error = scsi_add_host(host_ptr, &pdev->dev);
 
 	if (error) {
@@ -1052,10 +1070,17 @@
 	rc_printk(RC_DEBUG, "%s: free private_mem 0x%px\n",
 		  __FUNCTION__, adapter->private_mem.vaddr);
 	if (adapter->private_mem.vaddr)  {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6,3,0)
 		pci_free_consistent(adapter->pdev,
 				    rc_state.memsize_per_controller,
 				    adapter->private_mem.vaddr,
 				    adapter->private_mem.dma_address);
+#else
+		dma_free_coherent(&adapter->pdev->dev,
+					rc_state.memsize_per_controller,
+					adapter->private_mem.vaddr,
+					adapter->private_mem.dma_address);
+#endif					
 	}
 
 	/* pci_disable_device(adapter->pdev); */
@@ -1497,24 +1522,29 @@
  *
  * Queues a SCSI command
  */
-
-
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6,3,0)
 int rc_queue_cmd_lck (struct scsi_cmnd * scp, void (*CompletionRoutine) (struct scsi_cmnd *))
 {
 	scp->scsi_done = CompletionRoutine;
+#else
+int rc_queue_cmd_lck (struct scsi_cmnd * scp)
+{
+#endif
 	//#define FAIL_ALL_IO 0
 
 #ifdef FAIL_ALL_IO
 	scp->result = DID_NO_CONNECT << 16;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6,3,0)	
 	scp->scsi_done(scp);
+#else
+	scsi_done(scp);
+#endif	
 	return 0;
 #endif
-
 #if 0
 	rc_printk(RC_DEBUG2, "\trc_queue_cmd B/T/L %d/%d/%d\n",
 		  scp->device->channel, scp->device->id, scp->device->lun);
 #endif
-
     // If we are suspended(controller is not restarted) block any IO from coming in
     if (  (rc_state.is_suspended == 1) || ( (rc_state.state & SHUTDOWN) == SHUTDOWN) ) {
         return SCSI_MLQUEUE_DEVICE_BUSY; 
@@ -1537,13 +1567,23 @@
 		  scp, scp->device->channel, scp->device->id);
 	// rc_config_debug = 1;
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6,3,0)	
 	srb = (rc_srb_t *)scp->SCp.ptr;
+#else
+	srb = (rc_srb_t *)rcraid_priv(scp)->rc_srb;
+#endif
+
 	if (srb != NULL) {
 		rc_printk(RC_DEBUG, "\tsrb: 0x%px seq_num %d function %x status %x "
 			  "flags %x b/t/l %d/%d/%d\n", srb, srb->seq_num, srb->function,
 			  srb->status, srb->flags, srb->bus, srb->target, srb->lun);
 		srb->scsi_context = NULL;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6,3,0)	
 		scp->SCp.ptr = NULL;
+#else
+		rcraid_priv(scp)->rc_srb = NULL;
+#endif
+
 	} else {
 		rc_printk(RC_WARN, "rc_eh_abort_cmd: srb already completed\n");
 		// most likely here because we already processed srb
diff -ruN rcraid-download/9.3.0/driver_sdk/src/rc_msg.c rcraid-9.3.0/src/rc_msg.c
--- rcraid-download/9.3.0/driver_sdk/src/rc_msg.c	2021-05-03 19:46:00.000000000 +1100
+++ rcraid-9.3.0/src/rc_msg.c	2023-07-24 15:16:38.484992737 +1100
@@ -1153,10 +1153,15 @@
 		if (adapter == (rc_adapter_t *)0) {
 			rc_printk(RC_ERROR, "rc_msg_init null adapter\n");
 		}
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6,3,0)		
 		addr = pci_alloc_consistent(adapter->pdev,
 					    state->memsize_per_controller,
 					    &adapter->private_mem.dma_address);
-
+#else
+		addr = dma_alloc_coherent(&adapter->pdev->dev,
+						state->memsize_per_controller,
+						&adapter->private_mem.dma_address,GFP_ATOMIC);		
+#endif
 		if (addr == (void *)0) {
 			rc_printk(RC_ERROR,"rc_msg_init: can not alloc %d bytes of per "
 				  "controller memory\n", state->memsize_per_controller);
@@ -1472,7 +1477,11 @@
 		rc_printk(RC_ERROR, "rc_msg_send_srb:  scatter-gather list too large "
 			  "(%d)\n", scsi_sg_count(scp));
  		scp->result = DID_NO_CONNECT << 16;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6,3,0)		
  		scp->scsi_done(scp);
+#else
+		scsi_done(scp);
+#endif		
 		return 0;
 	}
 
@@ -1518,14 +1527,21 @@
 	srb->scsi_context = scp;
 	srb->sg_list      = (rc_sg_list_t *)&srb->private32[0];
 	srb->dev_private  = (char *)srb->sg_list + sg_list_size;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6,3,0)		
 	srb->timeout      = scp->request->timeout/HZ;
+#else		
+	srb->timeout      = scsi_cmd_to_rq(scp)->timeout/HZ;
+#endif		
 	srb->seq_num      = rc_srb_seq_num++;
 
 	/* the scsi_cmnd pointer points at our srb, at least until the command is
 	 * aborted
 	 */
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6,3,0)			
 	scp->SCp.ptr = (void *)srb;
-
+#else
+	rcraid_priv(scp)->rc_srb = srb;
+#endif
 	rc_msg_build_sg(srb);
 
 	// rc_printk(RC_DEBUG2, "\nrc_msg_send_srb: seq_num: %d B/T/L %d/%d/%d\n",
@@ -1914,8 +1930,11 @@
 		kfree(srb);
 		return;
 	}
-
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6,3,0)			
 	scp->SCp.ptr = NULL;
+#else
+	rcraid_priv(scp)->rc_srb = NULL;
+#endif	
 
 	if (srb->status == RC_SRB_STATUS_SUCCESS) {
 		 //rc_printk(RC_DEBUG2, "%s: seq_num %d SUCCESS\n", __FUNCTION__,
@@ -1931,7 +1950,11 @@
         if (((unsigned char *) srb->sense)[0] != 0)     // sense data returned
             scp->result = SAM_STAT_CHECK_CONDITION;
 		GET_IO_REQUEST_LOCK_IRQSAVE(irql);
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6,3,0)		
 		scp->scsi_done(scp);
+#else		
+		scsi_done(scp);
+#endif		
 		PUT_IO_REQUEST_LOCK_IRQRESTORE(irql);
 		srb->seq_num = -1;
 		kfree(srb);
@@ -1950,7 +1973,11 @@
 			  srb->seq_num);
 		scp->result = DID_BAD_TARGET << 16;
 		GET_IO_REQUEST_LOCK_IRQSAVE(irql);
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6,3,0)		
 		scp->scsi_done(scp);
+#else		
+		scsi_done(scp);
+#endif		
 		PUT_IO_REQUEST_LOCK_IRQRESTORE(irql);
 		srb->seq_num = -1;
 		kfree(srb);
@@ -1987,7 +2014,11 @@
 	}
 
 	GET_IO_REQUEST_LOCK_IRQSAVE(irql);
-	scp->scsi_done (scp);
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6,3,0)		
+		scp->scsi_done(scp);
+#else		
+		scsi_done(scp);
+#endif		
 	PUT_IO_REQUEST_LOCK_IRQRESTORE(irql);
 	srb->seq_num = -1;
 	kfree(srb);
@@ -2230,8 +2261,11 @@
     adapter = (rc_adapter_t *) dma_address->dev_handle;
     dmaHandle = (dma_addr_t*) &dma_address->dmaHandle;
 
-
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6,3,0)
     dma_address->cpu_addr = pci_alloc_consistent(adapter->pdev,dma_address->bytes, dmaHandle );
+#else
+	dma_address->cpu_addr = dma_alloc_coherent(&adapter->pdev->dev,dma_address->bytes, dmaHandle,GFP_ATOMIC);
+#endif	
 
     if (dma_address->cpu_addr)
     {
@@ -2242,7 +2276,11 @@
 void
 rc_msg_free_dma_memory(rc_adapter_t	*adapter, void *cpu_addr, dma_addr_t dmaHandle, rc_uint32_t bytes)
 {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6,3,0)	
     pci_free_consistent(adapter->pdev, bytes, cpu_addr, dmaHandle);
+#else
+	dma_free_coherent(&adapter->pdev->dev, bytes, cpu_addr, dmaHandle);
+#endif
 }
 
 void 
@@ -2330,8 +2368,11 @@
 			len_mapped = PAGE_SIZE - offset;
 			if (len < len_mapped)
 				len_mapped = len;    
-                
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6,3,0)
 			map->physical_address = dma_map_page(&adapter->pdev->dev, page, offset, len_mapped, PCI_DMA_BIDIRECTIONAL);
+#else
+			map->physical_address = dma_map_page(&adapter->pdev->dev, page, offset, len_mapped, DMA_BIDIRECTIONAL);
+#endif
             if (dma_mapping_error(&adapter->pdev->dev, map->physical_address))
             {
                 map->number_bytes = 0;
@@ -2341,8 +2382,11 @@
 		}
     } else if ((map->memory_id & MEM_TYPE) == RC_MEM_DMA) {
         vaddr = (void *)(rc_uint_ptr_t)map->address;
-        
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6,3,0)        
         map->physical_address = dma_map_single(&adapter->pdev->dev, vaddr, map->number_bytes, PCI_DMA_BIDIRECTIONAL); 
+#else
+		map->physical_address = dma_map_single(&adapter->pdev->dev, vaddr, map->number_bytes, DMA_BIDIRECTIONAL); 
+#endif		
         if (dma_mapping_error(&adapter->pdev->dev, map->physical_address))
         {
             map->number_bytes = 0;
diff -ruN rcraid-download/9.3.0/driver_sdk/src/rc_msg_platform.h rcraid-9.3.0/src/rc_msg_platform.h
--- rcraid-download/9.3.0/driver_sdk/src/rc_msg_platform.h	2021-05-03 19:46:00.000000000 +1100
+++ rcraid-9.3.0/src/rc_msg_platform.h	2023-07-24 15:14:10.611241306 +1100
@@ -27,8 +27,11 @@
 #undef unsigned
 #define RC_STHEXT_REDO_STRICT_TYPES
 #endif //int
-
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6,3,0)
 #include <stdarg.h>
+#else
+#include <linux/stdarg.h>
+#endif 
 
 #ifdef RC_STHEXT_REDO_STRICT_TYPES
 #define int Cannot_USE_int_because_it_is_ambiguous
